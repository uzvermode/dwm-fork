pushup and pushdown provide a way to move clients inside the clients list.

Source: http://dwm.suckless.org/patches/push

--- a/dwm.c 2015-03-01 19:49:50.305463478 +0200
+++ b/dwm.c 2015-03-01 19:49:50.305463478 +0200
@@ -208,7 +208,10 @@
 static void movemouse(const Arg *arg);
 static Client *nexttiled(Client *c);
 static void pop(Client *);
+static Client *prevtiled(Client *c);
 static void propertynotify(XEvent *e);
+static void pushdown(const Arg *arg);
+static void pushup(const Arg *arg);
 static void quit(const Arg *arg);
 static Monitor *recttomon(int x, int y, int w, int h);
 static void resize(Client *c, int x, int y, int w, int h, Bool interact);
@@ -2205,6 +2208,65 @@
 	pop(c);
 }
 
+static Client *
+prevtiled(Client *c) {
+   Client *p, *r;
+
+   for(p = selmon->clients, r = NULL; p && p != c; p = p->next)
+       if(!p->isfloating && ISVISIBLE(p))
+           r = p;
+   return r;
+}
+
+static void
+pushup(const Arg *arg) {
+   Client *sel = selmon->sel;
+   Client *c;
+
+   if(!sel || sel->isfloating)
+       return;
+   if((c = prevtiled(sel))) {
+       /* attach before c */
+       detach(sel);
+       sel->next = c;
+       if(selmon->clients == c)
+           selmon->clients = sel;
+       else {
+           for(c = selmon->clients; c->next != sel->next; c = c->next);
+           c->next = sel;
+       }
+   } else {
+       /* move to the end */
+       for(c = sel; c->next; c = c->next);
+       detach(sel);
+       sel->next = NULL;
+       c->next = sel;
+   }
+   focus(sel);
+   arrange(selmon);
+}
+
+static void
+pushdown(const Arg *arg) {
+   Client *sel = selmon->sel;
+   Client *c;
+
+   if(!sel || sel->isfloating)
+       return;
+   if((c = nexttiled(sel->next))) {
+       /* attach after c */
+       detach(sel);
+       sel->next = c->next;
+       c->next = sel;
+   } else {
+       /* move to the front */
+       detach(sel);
+       attach(sel);
+   }
+   focus(sel);
+   arrange(selmon);
+}
+
 int
 main(int argc, char *argv[]) {
 	if(argc == 2 && !strcmp("-v", argv[1]))
